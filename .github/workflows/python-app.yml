# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12.1"
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install pytest
    - name: Test with pytest
      run: |
       pip install pytest pytest-cov
       pytest
    - name: Autopep8
      run: | 
       pip install autopep8
       autopep8 --in-place --aggressive --aggressive --recursive . > logs/autopep/latest_autopep.log
       if [ $? -eq 0 ]; then
          echo "Autopep8 passed successfully." >> logs/autopep/latest_autopep.log
       else
          echo "Autopep8 encountered issues." >> logs/autopep/latest_autopep.log
       fi
      continue-on-error: false
    
    - name: pylint
      run: | 
       pip install pylint
       pylint $(git ls-files '*.py') 2>&1 | tee logs/pylint/latest_pylint.log
      continue-on-error: false

    - name: bandit
      run: |
        pip install bandit 
        bandit -r . 2>&1 | tee logs/bandit/latest_bandit.log
      continue-on-error: false

    - name: Commit changes made by autopep8
      run: |
       git config user.name 'github-actions[bot]'
       git config user.email 'github-actions[bot]@users.noreply.github.com'
       git add .
       git commit -m "Apply autopep8, populate log files for pylint, autopep and bandit " || echo "No autopep8 changes"
       git push
    
    - name: Set Bandit Badge Status
    run: |
        if grep -q "No issues identified" logs/bandit/latest_bandit.log; then
          echo "Bandit-Status: success" > badge_status.txt
        else
          echo "Bandit-Status: failure" > badge_status.txt
        fi

    - name: Update Bandit Badge URL
      run: |
        STATUS=$(cat badge_status.txt | cut -d':' -f2 | xargs)
        if [ "$STATUS" == "success" ]; then
          echo "![Bandit Status](https://img.shields.io/badge/Bandit_Status-success-brightgreen)" > BADGES.md
        else
          echo "![Bandit Status](https://img.shields.io/badge/Bandit_Status-failure-red)" > BADGES.md
        fi

    - name: Commit Badge Update
      run: |
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'
        git add BADGES.md
        git commit -m "Update Bandit badge" || echo "No changes to commit"
        git push

# grep -q "rated at 10" logs/pylint/latest_pylint.log || exit 1
#        grep -q "No issues identified" logs/bandit/latest_bandit.log || exit 1